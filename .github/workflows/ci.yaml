name: CI Checks and Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'tests/**'
      - 'infrastructure/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'cdk.json'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'tests/**'
      - 'infrastructure/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'cdk.json'
      - '.github/workflows/ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.12'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip poetry

      - name: Set up Poetry cache
        id: poetry-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry # Path where Poetry caches installations
          # Use python version in cache key
          key: ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-poetry-

      - name: Install dependencies
        # Install all dependencies including dev groups
        # Use --sync if you want exact lock file versions, omit if you want potential updates within constraints
        run: poetry install --with dev

      - name: Run linting and formatting checks
        run: |
          poetry run black --check .
          poetry run isort --check .
          poetry run mypy .

      - name: Run unit tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          poetry run pytest --cov=app --cov-report=xml # Run tests and generate coverage report

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Store token in GitHub secrets
          files: coverage.xml
          fail_ci_if_error: true
